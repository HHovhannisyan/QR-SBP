// Generated by Dagger (https://dagger.dev).
package ru.mertech.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata({
    "ru.mertech.di.ApiModule.AuthInterceptorOkHttpClient",
    "ru.mertech.di.ApiModule.ApiKeyInterceptorOkHttpClient"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideOkHttpClientRaiffFactory implements Factory<OkHttpClient> {
  private final Provider<Interceptor> apiKeyInterceptorProvider;

  public ApiModule_ProvideOkHttpClientRaiffFactory(
      Provider<Interceptor> apiKeyInterceptorProvider) {
    this.apiKeyInterceptorProvider = apiKeyInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClientRaiff(apiKeyInterceptorProvider.get());
  }

  public static ApiModule_ProvideOkHttpClientRaiffFactory create(
      Provider<Interceptor> apiKeyInterceptorProvider) {
    return new ApiModule_ProvideOkHttpClientRaiffFactory(apiKeyInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClientRaiff(Interceptor apiKeyInterceptor) {
    return Preconditions.checkNotNullFromProvides(ApiModule.INSTANCE.provideOkHttpClientRaiff(apiKeyInterceptor));
  }
}
