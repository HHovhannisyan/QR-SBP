// Generated by Dagger (https://dagger.dev).
package ru.mertech.repository;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.mertech.sbpskb.api.RaiffPaymentApi;
import ru.mertech.sbpskb.api.TinkoffPaymentApi;
import ru.mertech.sbpskb.db.room.PaymentDAO;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Repository_Factory implements Factory<Repository> {
  private final Provider<PaymentDAO> paymentDAOProvider;

  private final Provider<TinkoffPaymentApi> tinkoffPaymentApiProvider;

  private final Provider<RaiffPaymentApi> raiffPaymentApiProvider;

  public Repository_Factory(Provider<PaymentDAO> paymentDAOProvider,
      Provider<TinkoffPaymentApi> tinkoffPaymentApiProvider,
      Provider<RaiffPaymentApi> raiffPaymentApiProvider) {
    this.paymentDAOProvider = paymentDAOProvider;
    this.tinkoffPaymentApiProvider = tinkoffPaymentApiProvider;
    this.raiffPaymentApiProvider = raiffPaymentApiProvider;
  }

  @Override
  public Repository get() {
    return newInstance(paymentDAOProvider.get(), tinkoffPaymentApiProvider.get(), raiffPaymentApiProvider.get());
  }

  public static Repository_Factory create(Provider<PaymentDAO> paymentDAOProvider,
      Provider<TinkoffPaymentApi> tinkoffPaymentApiProvider,
      Provider<RaiffPaymentApi> raiffPaymentApiProvider) {
    return new Repository_Factory(paymentDAOProvider, tinkoffPaymentApiProvider, raiffPaymentApiProvider);
  }

  public static Repository newInstance(PaymentDAO paymentDAO, TinkoffPaymentApi tinkoffPaymentApi,
      RaiffPaymentApi raiffPaymentApi) {
    return new Repository(paymentDAO, tinkoffPaymentApi, raiffPaymentApi);
  }
}
