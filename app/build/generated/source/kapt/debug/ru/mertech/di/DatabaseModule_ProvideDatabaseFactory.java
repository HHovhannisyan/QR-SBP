// Generated by Dagger (https://dagger.dev).
package ru.mertech.di;

import android.app.Application;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.mertech.sbpskb.db.room.PaymentDB;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideDatabaseFactory implements Factory<PaymentDB> {
  private final Provider<Application> applicationProvider;

  private final Provider<PaymentDB.Callback> callbackProvider;

  public DatabaseModule_ProvideDatabaseFactory(Provider<Application> applicationProvider,
      Provider<PaymentDB.Callback> callbackProvider) {
    this.applicationProvider = applicationProvider;
    this.callbackProvider = callbackProvider;
  }

  @Override
  public PaymentDB get() {
    return provideDatabase(applicationProvider.get(), callbackProvider.get());
  }

  public static DatabaseModule_ProvideDatabaseFactory create(
      Provider<Application> applicationProvider, Provider<PaymentDB.Callback> callbackProvider) {
    return new DatabaseModule_ProvideDatabaseFactory(applicationProvider, callbackProvider);
  }

  public static PaymentDB provideDatabase(Application application, PaymentDB.Callback callback) {
    return Preconditions.checkNotNullFromProvides(DatabaseModule.INSTANCE.provideDatabase(application, callback));
  }
}
