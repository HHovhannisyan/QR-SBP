// Generated by Dagger (https://dagger.dev).
package ru.mertech.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata({
    "javax.inject.Named",
    "ru.mertech.di.ApiModule.AuthInterceptorOkHttpClient"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideRetrofitRaiffFactory implements Factory<Retrofit> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<String> urlProvider;

  public ApiModule_ProvideRetrofitRaiffFactory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<String> urlProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.urlProvider = urlProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofitRaiff(okHttpClientProvider.get(), urlProvider.get());
  }

  public static ApiModule_ProvideRetrofitRaiffFactory create(
      Provider<OkHttpClient> okHttpClientProvider, Provider<String> urlProvider) {
    return new ApiModule_ProvideRetrofitRaiffFactory(okHttpClientProvider, urlProvider);
  }

  public static Retrofit provideRetrofitRaiff(OkHttpClient okHttpClient, String url) {
    return Preconditions.checkNotNullFromProvides(ApiModule.INSTANCE.provideRetrofitRaiff(okHttpClient, url));
  }
}
