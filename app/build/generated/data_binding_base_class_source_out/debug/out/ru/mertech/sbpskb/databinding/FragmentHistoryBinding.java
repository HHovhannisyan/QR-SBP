// Generated by view binder compiler. Do not edit!
package ru.mertech.sbpskb.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ru.mertech.sbpskb.R;

public final class FragmentHistoryBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Chip chip1;

  @NonNull
  public final Chip chipDateRange;

  @NonNull
  public final Chip chipMonth;

  @NonNull
  public final Chip chipWeek;

  @NonNull
  public final RecyclerView rvTodo;

  private FragmentHistoryBinding(@NonNull RelativeLayout rootView, @NonNull Chip chip1,
      @NonNull Chip chipDateRange, @NonNull Chip chipMonth, @NonNull Chip chipWeek,
      @NonNull RecyclerView rvTodo) {
    this.rootView = rootView;
    this.chip1 = chip1;
    this.chipDateRange = chipDateRange;
    this.chipMonth = chipMonth;
    this.chipWeek = chipWeek;
    this.rvTodo = rvTodo;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chip1;
      Chip chip1 = ViewBindings.findChildViewById(rootView, id);
      if (chip1 == null) {
        break missingId;
      }

      id = R.id.chip_date_range;
      Chip chipDateRange = ViewBindings.findChildViewById(rootView, id);
      if (chipDateRange == null) {
        break missingId;
      }

      id = R.id.chip_month;
      Chip chipMonth = ViewBindings.findChildViewById(rootView, id);
      if (chipMonth == null) {
        break missingId;
      }

      id = R.id.chip_week;
      Chip chipWeek = ViewBindings.findChildViewById(rootView, id);
      if (chipWeek == null) {
        break missingId;
      }

      id = R.id.rv_todo;
      RecyclerView rvTodo = ViewBindings.findChildViewById(rootView, id);
      if (rvTodo == null) {
        break missingId;
      }

      return new FragmentHistoryBinding((RelativeLayout) rootView, chip1, chipDateRange, chipMonth,
          chipWeek, rvTodo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
